{"version":3,"sources":["utils.js","LetterButton.js","App.js","reportWebVitals.js","index.js"],"names":["String","prototype","replaceAt","index","replacement","this","substr","length","LetterButton","letter","letterBlur","letterBlock","lettersHidden","onClick","className","WORDS","ALPHABET","App","props","state","wordToGuess","randWord","toUpperCase","wordToGuessMasked","clickedLetters","restartHidden","won","console","log","setState","maskWord","max","Math","floor","random","wordToMask","replace","includes","hideLetters","showRestart","resetAll","tmpMasked","slice","i","concat","checkWordCompleted","aria-label","role","src","title","width","height","frameBorder","allowFullScreen","href","map","getClassForLetter","getClassForLetterBlock","handleLetterOnClick","bind","handleRestart","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAKAA,OAAOC,UAAUC,UAAY,SAAUC,EAAOC,GAC1C,OAAOC,KAAKC,OAAO,EAAGH,GAASC,EAAcC,KAAKC,OAAOH,EAAQC,EAAYG,S,iBCUlEC,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYC,EAAvB,EAAuBA,YAAaC,EAApC,EAAoCA,cAAeT,EAAnD,EAAmDA,MAAOU,EAA1D,EAA0DA,QAA1D,OACjB,qBAAKC,UAAS,uBAAkBH,EAAlB,YAAiCC,GAA6BC,QAAS,kBAAMA,EAAQV,IAAnG,SACI,sBAAMW,UAAS,kBAAaJ,GAA5B,SAA2CD,KADsBN,ICAnEY,G,MAAQ,CACZ,QACA,0BACA,aACA,eACA,WACA,2BACA,MACA,MACA,WACA,aACA,QACA,QACA,2BACA,uBACA,gBACA,OACA,OACA,aACA,mBAGIC,EAAW,CACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAsJ/CC,E,kDAzIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,EAAKC,WAAWC,cAC7BC,kBAAmB,GACnBC,eAAgB,GAChBZ,cAAe,GACfa,cAAe,SACfC,KAAK,GAEPC,QAAQC,IAAI,EAAKT,MAAMC,aAVN,E,qDAanB,WACEf,KAAKwB,SAAS,CAAEN,kBAAmBlB,KAAKyB,SAASzB,KAAKc,MAAMC,iB,sBAG9D,WACE,OAAOL,GF5DWgB,EE4DQ,GF3DnBC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,MADjD,IAAsBA,I,sBE+DpB,SAASI,GACP,OAAOA,EAAWC,QAAQ,OAAQ,O,+BAGpC,SAAkBjC,GAGhB,OAF2BE,KAAKc,MAAxBK,eAEWa,SAASlC,GACnB,cACF,K,oCAGT,SAAuBA,GAGrB,OAF2BE,KAAKc,MAAxBK,eAEWa,SAASlC,GACnB,mBACF,K,yBAGT,WACEE,KAAKwB,SAAS,CAAEjB,cAAe,a,yBAGjC,WACEP,KAAKwB,SAAS,CAAEJ,cAAe,O,gCAGjC,WAAsB,IAAD,EACwBpB,KAAKc,MAAxCC,EADW,EACXA,YADW,EACEG,oBAEKH,IACxBf,KAAKwB,SAAS,CAAEH,KAAK,IACrBrB,KAAKiC,cACLjC,KAAKkC,iB,2BAIT,WAAiB,IAAD,OACdlC,KAAKwB,SAAS,CAAEjB,cAAe,GAAIa,cAAe,WAChD,WACE,EAAKe,gB,sBAIX,WAAY,IAAD,OACTnC,KAAKwB,SAAS,CAAET,YAAaf,KAAKgB,WAAWC,cAAeE,eAAgB,GAAIE,KAAK,IACnF,WACE,EAAKG,SAAS,CAAEN,kBAAmB,EAAKO,SAAS,EAAKX,MAAMC,oB,iCAIlE,SAAoBjB,GAAQ,IAAD,SACkCE,KAAKc,MAAxDC,EADiB,EACjBA,YAAaG,EADI,EACJA,kBAAmBC,EADf,EACeA,eACpCiB,EAAYlB,EAAkBmB,QAElC,IAAKlB,EAAea,SAASlC,IACvBiB,EAAYiB,SAASrB,EAASb,IAChC,IAAK,IAAIwC,EAAI,EAAGA,EAAIvB,EAAYb,OAAQoC,IAClCvB,EAAYuB,KAAO3B,EAASb,KAC9BsC,EAAYA,EAAUvC,UAAUyC,EAAG3B,EAASb,IAC5CE,KAAKwB,SAAS,CACZN,kBAAmBkB,EAAWjB,eAAgBA,EAAeoB,OAAOzC,KACnE,WACD,EAAK0C,2B,oBAQjB,WAAU,IAAD,SACkCxC,KAAKc,MAAtCP,EADD,EACCA,cAAea,EADhB,EACgBA,cACvB,OACE,8BACE,sBAAKX,UAAU,gBAAf,UACE,sDACA,6GACA,sBAAKA,UAAS,kBAAaW,GAA3B,UACE,sBACEqB,aAAW,iBACXC,KAAK,MAFP,SAGC,8DACD,wBAAQC,IAAI,wCAAwCC,MAAM,iBAAiBC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAItC,UAAU,cAAcuC,iBAAe,IAAU,4BAAG,mBAAGC,KAAK,oEAAR,4BAE1K,uBAAMxC,UAAU,cAAhB,cAAgCT,KAAKc,MAAMI,kBAA3C,OACA,sBAAKT,UAAU,gBAAf,UACGE,EAASuC,KAAI,SAAC9C,EAAQN,GAAT,OACZ,cAAC,EAAD,CACEM,OAAQA,EACRC,WAAY,EAAK8C,kBAAkBrD,GACnCQ,YAAa,EAAK8C,uBAAuBtD,GACzCS,cAAeA,EAEfT,MAAOA,EACPU,QAAS,EAAK6C,oBAAoBC,KAAK,IAFlCxD,MAOT,qBAAKW,UAAS,+BAA0BW,GAAxC,SACE,sBACEqB,aAAW,UACXC,KAAK,MACLjC,UAAS,UACTD,QAASR,KAAKuD,cAAcD,KAAKtD,MAJnC,wC,GArIIwD,IAAMC,WCpBTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a1d705d1.chunk.js","sourcesContent":["function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n// eslint-disable-next-line no-extend-native\nString.prototype.replaceAt = function (index, replacement) {\n    return this.substr(0, index) + replacement + this.substr(index + replacement.length);\n}\n\nexport { getRandomInt }","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './LetterButton.css';\n\nconst LetterButton = ({ letter, letterBlur, letterBlock, lettersHidden, index, onClick }) => (\n    <div className={`letter-block ${letterBlock} ${lettersHidden}`} key={index} onClick={() => onClick(index)}>\n        <span className={`letters ${letterBlur}`}>{letter}</span>\n    </div>\n)\n\nLetterButton.propTypes = {\n    letter: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default LetterButton;","import React from 'react';\nimport { getRandomInt } from './utils';\nimport LetterButton from './LetterButton';\nimport './App.css';\n\nconst WORDS = [\n  'React',\n  'Single-page Application',\n  'ECMAScript',\n  'Compilateurs',\n  'Bundlers',\n  'Gestionnaires de paquets',\n  'CDN',\n  'JSX',\n  'Elements',\n  'Composants',\n  'props',\n  'state',\n  'Methodes de cycle de vie',\n  'Composants controles',\n  'non controles',\n  'Cles',\n  'Refs',\n  'Evenements',\n  'Reconciliation',\n]\n\nconst ALPHABET = [\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n]\n\nclass App extends React.Component {\n  // state = {\n  // \twordToGuess: '',\n  // \twordToGuessMasked: '',\n  // \tclickedLetters: [],\n  // \tlettersHidden: '',\n  // \trestartHidden: 'hidden',\n  // \twon: false\n  // }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      wordToGuess: this.randWord().toUpperCase(),\n      wordToGuessMasked: '',\n      clickedLetters: [],\n      lettersHidden: '',\n      restartHidden: 'hidden',\n      won: false\n    }\n    console.log(this.state.wordToGuess)\n  }\n\n  componentDidMount() {\n    this.setState({ wordToGuessMasked: this.maskWord(this.state.wordToGuess) })\n  }\n\n  randWord() {\n    return WORDS[getRandomInt(19)]\n  }\n\n  maskWord(wordToMask) {\n    return wordToMask.replace(/\\w/gi, '_')\n  }\n\n  getClassForLetter(index) {\n    const { clickedLetters } = this.state\n\n    if (clickedLetters.includes(index))\n      return 'letter-blur'\n    return ''\n  }\n\n  getClassForLetterBlock(index) {\n    const { clickedLetters } = this.state\n\n    if (clickedLetters.includes(index))\n      return 'letter-block-add'\n    return ''\n  }\n\n  hideLetters() {\n    this.setState({ lettersHidden: 'hidden' })\n  }\n\n  showRestart() {\n    this.setState({ restartHidden: '' })\n  }\n\n  checkWordCompleted() {\n    const { wordToGuess, wordToGuessMasked } = this.state\n\n    if (wordToGuessMasked === wordToGuess) {\n      this.setState({ won: true })\n      this.hideLetters()\n      this.showRestart()\n    }\n  }\n\n  handleRestart() {\n    this.setState({ lettersHidden: '', restartHidden: 'hidden' },\n      () => {\n        this.resetAll()\n      })\n  }\n\n  resetAll() {\n    this.setState({ wordToGuess: this.randWord().toUpperCase(), clickedLetters: [], won: false },\n      () => {\n        this.setState({ wordToGuessMasked: this.maskWord(this.state.wordToGuess) })\n      })\n  }\n\n  handleLetterOnClick(index) {\n    const { wordToGuess, wordToGuessMasked, clickedLetters } = this.state\n    let tmpMasked = wordToGuessMasked.slice()\n\n    if (!clickedLetters.includes(index)) {\n      if (wordToGuess.includes(ALPHABET[index])) {\n        for (var i = 0; i < wordToGuess.length; i++) {\n          if (wordToGuess[i] === ALPHABET[index]) {\n            tmpMasked = tmpMasked.replaceAt(i, ALPHABET[index])\n            this.setState({\n              wordToGuessMasked: tmpMasked, clickedLetters: clickedLetters.concat(index)\n            }, () => {\n              this.checkWordCompleted()\n            })\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    const { lettersHidden, restartHidden } = this.state\n    return (\n      <div>\n        <div className=\"center-middle\">\n          <h1>LE PENDU EN REACT JS</h1>\n          <h2>Devinez le mot qui se cache derriÃ¨re les tirets Ã  l'aide des lettres.</h2>\n          <div className={`restart ${restartHidden}`}>\n            <span\n              aria-label=\"congratulation\"\n              role=\"img\"\n            ><p>Bien jouÃ© ! ðŸŽ‰</p></span>\n            <iframe src=\"https://giphy.com/embed/g9582DNuQppxC\" title=\"Congratulation\" width=\"480\" height=\"270\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/hero0fwar-karmawhore-rhyming-g9582DNuQppxC\">via GIPHY</a></p>\n          </div>\n          <span className=\"masked-text\"> {this.state.wordToGuessMasked} </span>\n          <div className=\"letters-block\">\n            {ALPHABET.map((letter, index) => (\n              <LetterButton\n                letter={letter}\n                letterBlur={this.getClassForLetter(index)}\n                letterBlock={this.getClassForLetterBlock(index)}\n                lettersHidden={lettersHidden}\n                key={index}\n                index={index}\n                onClick={this.handleLetterOnClick.bind(this)}>\n              </LetterButton>\n            )\n            )\n            }\n            <div className={`letter-block restart ${restartHidden}`}>\n              <span\n                aria-label=\"restart\"\n                role=\"img\"\n                className={`letters`}\n                onClick={this.handleRestart.bind(this)}\n              >ðŸ”„</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}